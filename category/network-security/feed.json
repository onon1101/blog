{
    "version": "https://jsonfeed.org/version/1",
    "title": "meow • All posts by \"network-security\" category",
    "description": "早安>.<",
    "home_page_url": "http://onon1101.github.io",
    "items": [
        {
            "id": "http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-6/",
            "url": "http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-6/",
            "title": "lecture-6 OS command injection",
            "date_published": "2023-05-08T05:01:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>這個是一個關於 linux 命令的系統注入，可以在一些輸入框注入 linux 命令。</p>\n<h2 id=\"pipe\"><a class=\"markdownIt-Anchor\" href=\"#pipe\">#</a> pipe (|)</h2>\n<p>把前一個進程執行的結果，輸出到下一個進程。下面的例子是把 nmap 執行完的結果輸出到 notepad。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ nmap <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token parameter variable\">-A</span> <span class=\"token operator\">|</span> notepad</pre></td></tr></table></figure><h2 id><a class=\"markdownIt-Anchor\" href=\"#\">#</a> (&amp;)</h2>\n<p>把進程設為後台的進程。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><h2 id=\"payload\"><a class=\"markdownIt-Anchor\" href=\"#payload\">#</a> payload</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BheWxvYWRib3gvY29tbWFuZC1pbmplY3Rpb24tcGF5bG9hZC1saXN0\">檔案</span></p>\n<h2 id=\"命令注入\"><a class=\"markdownIt-Anchor\" href=\"#命令注入\">#</a> 命令注入</h2>\n<p>在教學裡面，命令注入一些奇怪的參數後面，至於為什麼那裏可以注入，以及要注入什麼，都是由自己嘗試或者猜出來的，因此這是很困難的在沒有任何的提示之下。</p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-5/",
            "url": "http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-5/",
            "title": "lecture-5 Directory traversal",
            "date_published": "2023-05-07T23:35:00.000Z",
            "content_html": "<h2 id=\"說明\"><a class=\"markdownIt-Anchor\" href=\"#說明\">#</a> 說明</h2>\n<p>抓包之後去找一下那些參數可以被注入的，例如… web 的參數。</p>\n<p>可以利用文件來取得一些本來不能被看到的東西。當網站出現能訪問系統資料夾的漏洞時。我們就可以猜測密碼檔案。</p>\n<p>例如 linux：/etc/passwd, 但有時候並不是放在跟目錄底下。所以有可能是…/etc/passwd, …/…/etc/passwd, 之類的。<br>\n但如果是 windows, /WINDOWS/win.ini</p>\n<p>然後再注入的時候可以用 burpsuite 去猜測，而這邊有<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhlVGhpbmdzL3RyZWUvbWFzdGVyL0ZpbGUlMjBJbmNsdXNpb24=\">字典檔案</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3htZW5kZXovd2Z1enovYmxvYi9tYXN0ZXIvd29yZGxpc3QvSW5qZWN0aW9ucy9UcmF2ZXJzYWwudHh0\">檔案 2</span>\u001f。</p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-4/",
            "url": "http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-4/",
            "title": "lecture-4 信息洩漏(Information disclosure)",
            "date_published": "2023-05-07T09:46:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>信息洩漏可能有 phpinfo (), 或者後端用什麼語言寫的，那在低版本是不是會有漏洞。</p>\n<h2 id=\"information-disclosure-in-error-messages\"><a class=\"markdownIt-Anchor\" href=\"#information-disclosure-in-error-messages\">#</a> Information disclosure in error messages</h2>\n<p>他要找第三方的框架版本號。</p>\n<ol>\n<li>\n<p>抓包</p>\n</li>\n<li>\n<p>看網頁底下有什麼的目錄</p>\n</li>\n<li>\n<p>發現什麼都看不到，所以我們查看他版本最快的方法就是讓網頁產生一個錯誤</p>\n</li>\n<li>\n<p>然後我們把 <code>?product=很大的數字</code> ，然後就可以看到它是用 java 寫的了。</p>\n</li>\n<li>\n<p>或者我們去看他的腳本或者註釋就能發現版本訊息了。</p>\n</li>\n</ol>\n<h2 id=\"source-code-disclosure-via-backup-files\"><a class=\"markdownIt-Anchor\" href=\"#source-code-disclosure-via-backup-files\">#</a> Source code disclosure via backup files</h2>\n<p>他說備份文件洩漏了，而且備份文件裡面有資料庫的密碼。</p>\n<ol>\n<li>robots.txt 就可以看到裡面有 backup 的目錄了</li>\n<li>在進去 backup, 裡面就可以看到密碼了</li>\n</ol>\n<h2 id=\"information-disclosure-on-debug-page\"><a class=\"markdownIt-Anchor\" href=\"#information-disclosure-on-debug-page\">#</a> Information disclosure on debug page</h2>\n<p>他說有訊息洩漏在 debug 的頁面，然後密碼洩漏在環境遍量 <code>SECRET_KEY</code>  裡面。</p>\n<ol>\n<li>\n<p>先掃描一下目錄，發現有 phpinfo.php 的頁面</p>\n</li>\n<li>\n<p>查詢一下他的 <code>SECRET_KEY</code> , 就能發現，但我們還有第二種方式</p>\n</li>\n<li>\n<p>點選 burpsuite 右鍵，找到 engagement tools, 然後 Search, 輸入環境變量就能找到了。</p>\n</li>\n</ol>\n<h2 id=\"information-disclosure-in-version-control-histroy\"><a class=\"markdownIt-Anchor\" href=\"#information-disclosure-in-version-control-histroy\">#</a> Information disclosure in version control histroy</h2>\n<p>在 git 的頁面就可以看到。</p>\n<ol>\n<li></li>\n</ol>\n<h2 id=\"authentication-bypass\"><a class=\"markdownIt-Anchor\" href=\"#authentication-bypass\">#</a> Authentication bypass</h2>\n<p>這是一個要偽裝本地原 ip 的題目。作者在想要如何偽裝的時候想用 http 的標頭偽裝，但這個方法失敗了。</p>\n<ol>\n<li>標準答案是用 TRACT 在 TCP 協議方法裡面</li>\n<li>postman 可以用 port 請求的工具</li>\n<li>而他題目裡面因為有自定義的標頭檔案，所以要用 TRACT 的 TCP 協議去查看，並且修改一下。</li>\n<li>將他修改為 127.0.0.1</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-3/",
            "url": "http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-3/",
            "title": "lecture-3 邏輯漏洞",
            "date_published": "2023-05-07T07:48:00.000Z",
            "content_html": "<h2 id=\"邏輯漏洞舉例\"><a class=\"markdownIt-Anchor\" href=\"#邏輯漏洞舉例\">#</a> 邏輯漏洞舉例</h2>\n<p>如果 1 件 = 100 元，10 件 = 1000 元，那麼 -1 件 是不是就會是 -100 元。<br>\n在分析一個網站的時候，最好把每一個頁面都分析清楚。</p>\n<p>這邊用的靶場就不用 DVWA, 會用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L2FsbC1sYWJz\">這個</span>。</p>\n<h2 id=\"excessive-trust-in-client-side-controls\"><a class=\"markdownIt-Anchor\" href=\"#excessive-trust-in-client-side-controls\">#</a> Excessive trust in client-side controls</h2>\n<p>這邊先用 butpsuite 分析封包，發現他會把價錢和數量都送給後端。因此我們改一下送出去的價錢就好了。</p>\n<h2 id=\"high-level-logic-vulnerability\"><a class=\"markdownIt-Anchor\" href=\"#high-level-logic-vulnerability\">#</a> High-level logic vulnerability</h2>\n<p>封包分析完後只能送數量，所以我們送出一個負的數量，他說總共的價格不能小於 0, 因此我們選很多商品讓價格大於 0, 這樣就可以了。</p>\n<h2 id=\"low-level-logic-flaw\"><a class=\"markdownIt-Anchor\" href=\"#low-level-logic-flaw\">#</a> Low-level logic flaw</h2>\n<p>在這個實驗中，沒有辦法送負的商品數量，因此思路是用溢出的方式，超過他整數的範圍，讓他溢出到負數的部分，讓他在 1~100 之間。<br>\n這次使用到 burpsuite 的自動發送封包，之前都是在 repeater 裡面，把封包送到 Intruder 那邊，用 null payload, 就可以不斷發送封包，因為最大送出的數量是 99, 只好送出很多個 99 數量的封包。</p>\n<h2 id=\"inconsistent-handling-of-exceptional-input\"><a class=\"markdownIt-Anchor\" href=\"#inconsistent-handling-of-exceptional-input\">#</a> Inconsistent handling of exceptional input</h2>\n<p>在 burpsuite 要發現一個網站底下的目錄可以用 target-&gt; sitemap -&gt; 右鍵 -&gt; engagement tools -&gt; discover content。<br>\n在掃瞄的過程中就可以掃到 admin 目錄了。</p>\n<p>先註冊一遍用戶。而這個頁面有給我們一個信箱，在註冊的時候可以用這個信箱。而註冊之後發現還是沒有辦法進去 admin 的頁面。</p>\n<p>架設我們在註冊的時候把 email 命名的很長，發現他最大只到 255 個字元，因此我們可以把 email 變成這樣： <code>&lt;username&gt;@dontwannacry.com.0aa800ed0436e336805a8b91006900df.web-security-academy.net</code> 。這樣註冊完成之後再去 username 裡面看，就能發現他只有 <code>&lt;username&gt;@dontwannacry.com</code> 。實際上在我們應該是要建造一個 <code>dontwannacry.com.0aa800ed0436e336805a8b91006900df.web-security-academy.net</code>  這樣的郵件服務器，但是這個網站幫我們都處理好了，所以只要在 web-security.net 這裡註冊就好了。</p>\n<p>註冊完成看一下就可以使用 admin 了。</p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-2/",
            "url": "http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-2/",
            "title": "lecture-2 弱口令或者弱密碼",
            "date_published": "2023-05-06T14:19:00.000Z",
            "content_html": "<h2 id=\"什麼是弱口令\"><a class=\"markdownIt-Anchor\" href=\"#什麼是弱口令\">#</a> 什麼是弱口令</h2>\n<p>很容易被電腦或者字典檔案猜到，就算他很複雜密碼。</p>\n<h2 id=\"hydra\"><a class=\"markdownIt-Anchor\" href=\"#hydra\">#</a> hydra</h2>\n<p>這個是 kali linux 內建的一個暴力破解的軟體。其實工具是非常強大的，但能不能破解取決於字典檔強不強大。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hydra <span class=\"token parameter variable\">-L</span> <span class=\"token operator\">&lt;</span>username_file<span class=\"token operator\">></span> <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>password_file<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>protocol<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"burnsuite\"><a class=\"markdownIt-Anchor\" href=\"#burnsuite\">#</a> burnsuite</h2>\n<ul>\n<li>先把瀏覽器的 proxy server 設定與 burnsuite 一樣，我自己測試的結果如果用 burnsuite 自己的瀏覽器，會出現一些莫名其妙的錯誤。</li>\n</ul>\n<pre><code class=\"language-config\">$ 127.0.0.1:8080 #這個是burnsuite預設的port\n</code></pre>\n<ul>\n<li>\n<p>先把 <code>Intercept is on</code> , 這個是監聽封包的意思。喔對了，因為教學影片裡面是真的打，而我找不到能打的機器，所以用 DVWA 架設了一個。之後有空再教學。<br>\n<img data-src=\"1.jpg\" alt></p>\n</li>\n<li>\n<p>右鍵找到 Intruder, 並點擊。<br>\n<img data-src=\"2.jpg\" alt></p>\n</li>\n<li>\n<p>然後進去。裡面高亮的部分就是暴力破解的部分。如果想要自定義破解，可以選擇 clean, 在點擊兩下，並且 add。會出現他自定義的符號包起來你要破解的地方。<br>\n<img data-src=\"3.jpg\" alt></p>\n</li>\n<li>\n<p>然後選擇攻擊類型。<br>\n<img data-src=\"4.jpg\" alt></p>\n</li>\n<li>\n<p>Payloads 選擇。這邊以後有在詳細的介紹。第二個是選擇字典檔案。第三個選擇從字典拿到的密碼要用什麼的加密方式。<br>\n<img data-src=\"5.jpg\" alt></p>\n</li>\n<li>\n<p>不過這邊我們遇到一個問題是，他的長度應該是要變化的，上網搜了一下是轉址的問題。</p>\n</li>\n</ul>\n<p>如果 username 和 password 要同時爆破，可以選擇四個模式的不同。</p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-1/",
            "url": "http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-1/",
            "title": "lecture-1 漏洞挖掘",
            "date_published": "2023-05-06T12:36:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>再查看這個分類之前，應該些去閱讀 detection 的分類。而漏洞的挖掘會用 burpsuite 比較多。所以先說一下怎麼取的 burpsuite 的 pro 版本。</p>\n<h2 id=\"下載頁面\"><a class=\"markdownIt-Anchor\" href=\"#下載頁面\">#</a> 下載頁面</h2>\n<p>這邊都是以 kali liunx 為主。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NOR1dOL0J1cnAtU3VpdGU=\">下載連結</span></p>\n<ol>\n<li>第一步都是先下載執行檔案 (.sh), 而當中必須要有 keygen.jar 的檔案才行。</li>\n</ol>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>folder</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>|-- Kali_Linux_Setup.sh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>|-- keygen.jar</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>|-- loader.jar</pre></td></tr></table></figure><p>不過在單純執行的 keygen 的時候遇到了一個小問題。沒辦法顯示 java 的程序。<br>\n解決的方法我是這樣做</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root@host$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">DISPLAY</span></span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1:0.0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kali@host$ xhost + <span class=\"token comment\">#這邊要在 user 執行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>access control disabled, clients can connect from any <span class=\"token function\">host</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kali@host$ <span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> kengen.jar</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>root@host$ xhost + <span class=\"token comment\">#就會抱錯</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xhost:  unable to <span class=\"token function\">open</span> display <span class=\"token string\">\"127.0.0.1:0.0\"</span></pre></td></tr></table></figure><p><img data-src=\"1.jpg\" alt></p>\n<ol start=\"2\">\n<li>先把左邊的 License 貼到 burpsuite 裡面，下一步之後再選擇  <code>Manual actvial</code> 。<br>\n<img data-src=\"2.jpg\" alt></li>\n<li>現在會跳出三個格子，把 burpsuite 裡面的請求碼貼到破解軟體的第二格中，之後再把破解軟體的第三格貼到 burpsuite, 至此就完成了。<br>\n<img data-src=\"4.jpg\" alt></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/06/network-security/detection/lecture-10/",
            "url": "http://onon1101.github.io/2023/05/06/network-security/detection/lecture-10/",
            "title": "lecture-10 信息蒐集的一個小小總結",
            "date_published": "2023-05-05T17:32:00.000Z",
            "content_html": "<h2 id=\"總結\"><a class=\"markdownIt-Anchor\" href=\"#總結\">#</a> 總結</h2>\n<p>在這之前的文章都是關於信息蒐集的部分，因此這邊來做一個小小的總結。</p>\n<ol>\n<li>一開始說我們可以用 Nmap 做防火牆的探測或者其他的掃描，後面可以使用子域名的掃瞄，因為域名跟子域名可能會有關係。</li>\n<li>對於不同的子域名可以做 port 的掃瞄，操作系統的探測。</li>\n<li>假設發現了一個網站，可以掃描她的網站指紋檢測。</li>\n<li>目錄的掃瞄，看看有什麼敏感的信息，有沒有後台。假設沒有的話，可以用漏洞的掃描。</li>\n<li>但如果掃描器都沒有甚麼用的話，可能是 WAF 擋下來了，那麼要去偵測有沒有 WAF。可以用代理掃描，但也有可能是 payload。但也要偵測有沒有 CDN。</li>\n<li>攻擊之後可能會是密罐。</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/06/network-security/detection/lecture-9/",
            "url": "http://onon1101.github.io/2023/05/06/network-security/detection/lecture-9/",
            "title": "lecture-9 密罐陷阱",
            "date_published": "2023-05-05T17:19:00.000Z",
            "content_html": "<h2 id=\"密罐陷阱\"><a class=\"markdownIt-Anchor\" href=\"#密罐陷阱\">#</a> 密罐陷阱</h2>\n<p>簡單來說是特意布置的陷阱，讓攻擊者能上當，當攻擊者使用攻擊手段進行攻擊的話，我們就能知道他的攻擊手法，這就是密罐陷阱。<br>\n如果要說怎麼避免的話，只能透過經驗去判斷，假設今天這個網站很多漏洞，就要有警覺心了。</p>\n<h2 id=\"hfish\"><a class=\"markdownIt-Anchor\" href=\"#hfish\">#</a> Hfish</h2>\n<p>一個功能不那麼強大的密罐<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZmlzaC5pby8jLw==\">下載網址</span></p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/06/network-security/detection/lecture-8/",
            "url": "http://onon1101.github.io/2023/05/06/network-security/detection/lecture-8/",
            "title": "lecture-8 CDN檢測",
            "date_published": "2023-05-05T16:17:00.000Z",
            "content_html": "<h2 id=\"whichcdn\"><a class=\"markdownIt-Anchor\" href=\"#whichcdn\">#</a> whichCDN</h2>\n<p>原理可能是用證書的透明度。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL05pdHI0eC93aGljaENETg==\">下載連結</span></p>\n<h2 id=\"cloudflair\"><a class=\"markdownIt-Anchor\" href=\"#cloudflair\">#</a> cloudflair</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NocmlzdG9waGV0ZC9DbG91ZEZsYWly\">下載連結</span></p>\n<h2 id=\"w8fuckdcdn\"><a class=\"markdownIt-Anchor\" href=\"#w8fuckdcdn\">#</a> w8fuckdcdn</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NocmlzdG9waGV0ZC9DbG91ZEZsYWly\">下載連結</span></p>\n<hr>\n<p>其實也可以用 nslookup 判斷有沒有使用 CDN, 如果有多個 IP 的解析，就代表有。</p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/05/network-security/detection/lecture-7/",
            "url": "http://onon1101.github.io/2023/05/05/network-security/detection/lecture-7/",
            "title": "lecture-7 代理掃描",
            "date_published": "2023-05-05T14:19:00.000Z",
            "content_html": "<h2 id=\"proxychain-ng\"><a class=\"markdownIt-Anchor\" href=\"#proxychain-ng\">#</a> proxychain-ng</h2>\n<p>不過這個需要自己編譯。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JvZmwwci9wcm94eWNoYWlucy1uZw==\">下載網址</span></p>\n<p>在執行命令之前，需要開 tor-browser/tor/tor…, 不過不太知道那是幹嘛的，所以之後再來補。<br>\n補：tor.exe 是下載完 tor 瀏覽器後可以看到的執行檔案。tor.exe 是一個稱為洋蔥路由器的軟體，開啟她之後可以使用代理連線 (P2P)。從這個端口發送的流量就可以到 tor 裡面的路由了。<br>\n<img data-src=\"1.jpg\" alt></p>\n<p>這樣就會可以從代理的地方出口封包。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>proxychains4 <span class=\"token parameter variable\">-f</span> ./proxychains4-ng-4.11/src/proxychains.conf nmap <span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>可以看到默認是用 tor socks4 代理的</p>\n<pre><code class=\"language-config\">#./src/proxychains.conf\n...\n[ProxyList]\n# add proxy here ...\n# meanwile\n# defaults set to &quot;tor&quot;\nsocks4 \t127.0.0.1 9050\n...\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-6/",
            "url": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-6/",
            "title": "lecture-6 WAF原理與掃描",
            "date_published": "2023-05-04T12:04:00.000Z",
            "content_html": "<h2 id=\"聊天\"><a class=\"markdownIt-Anchor\" href=\"#聊天\">#</a> 聊天</h2>\n<p>其實掃描工具發展到最後可能都一樣，但他們的 payload 可能會不一樣。</p>\n<h2 id=\"waf可不可以吃\"><a class=\"markdownIt-Anchor\" href=\"#waf可不可以吃\">#</a> WAF 可不可以吃</h2>\n<p>全稱為 Web Application Firewall (網頁應用程式防火牆), 顧名思義用來保護網站的防火牆。工作在 OSI 第七層。<br>\n<img data-src=\"https://blog.cloudmax.com.tw/wp-content/uploads/2020/07/WAF-%E6%98%AF%E7%94%9A%E9%BA%BC-03.png\" alt></p>\n<p>而 WAF 是反向代理 (我就不展開說，反正我知道那是啥) 的方式，這樣能保護伺服器端。<br>\n<img data-src=\"https://www.cloudflare.com/img/learning/ddos/glossary/waf/waf.png\" alt></p>\n<h2 id=\"waf00f\"><a class=\"markdownIt-Anchor\" href=\"#waf00f\">#</a> waf00f</h2>\n<p>一個 WAF 的探測工具。可以探測 waf 的一些類型。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ waf00f <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span></pre></td></tr></table></figure><p>原理也是用封包探測的方式，再去分析她的特偵。</p>\n<h1 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\">#</a> Reference</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vemgtdHcvbGVhcm5pbmcvZGRvcy9nbG9zc2FyeS93ZWItYXBwbGljYXRpb24tZmlyZXdhbGwtd2FmLw==\">Cloudflare</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-5/",
            "url": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-5/",
            "title": "lecture-5 網頁漏洞掃描",
            "date_published": "2023-05-04T12:03:00.000Z",
            "content_html": "<h2 id=\"jaeleshttpsgithubcomjaeles-projectjaeles\"><a class=\"markdownIt-Anchor\" href=\"#jaeleshttpsgithubcomjaeles-projectjaeles\">#</a> (jaeles)[<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phZWxlcy1wcm9qZWN0L2phZWxlcw==\">https://github.com/jaeles-project/jaeles</span>]</h2>\n<p>可以與 burpsuite 對接。<br>\n下載一些漏洞庫，並且初始化一些東西。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ./jaeles-v0.15-linux-amd64 config init</pre></td></tr></table></figure><ul>\n<li>掃描</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ https://github.com/jaeles-project/jaeles scan <span class=\"token parameter variable\">-u</span> http://zero.webappsecurity.com/</pre></td></tr></table></figure><p>payload 可以從他的掃描庫裡面去看。<br>\n原理也是遍地的放封包給他，然後再分析。</p>\n<h2 id=\"niktohttpsgithubcomsullonikto\"><a class=\"markdownIt-Anchor\" href=\"#niktohttpsgithubcomsullonikto\">#</a> (nikto)[<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1bGxvL25pa3Rv\">https://github.com/sullo/nikto</span>]</h2>\n<p>默認都是把配置全部套用的。他可以代理，但這邊先不展開。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ nikto <span class=\"token parameter variable\">-h</span> <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>port<span class=\"token operator\">></span></pre></td></tr></table></figure><p>在說明文件裡面也有說明可以很多個掃描</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ nmap <span class=\"token parameter variable\">-p80</span> <span class=\"token number\">192.168</span>.0.0/24 <span class=\"token parameter variable\">-oG</span> - <span class=\"token operator\">|</span> nikto <span class=\"token parameter variable\">-h</span> -</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-4/",
            "url": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-4/",
            "title": "lecture-4 網站指紋識別與網站目錄掃描",
            "date_published": "2023-05-04T10:24:00.000Z",
            "content_html": "<h2 id=\"指紋識別\"><a class=\"markdownIt-Anchor\" href=\"#指紋識別\">#</a> 指紋識別</h2>\n<p>識別網站的特色，能查大概查清楚網站是用什麼框架寫的。在掃瞄網站目錄的時候，就能大概知道後台運作的流程。原理是請求不同的 HTTP 請求，每一個框架就會回傳不同的標頭檔案，再去分析他的特色。</p>\n<p>之後就可以用特定的工具去掃他的漏洞。假設網站是用 wordpress 搭建的，查詢可以使用 <code>wordpress scanner vulnerabilities</code></p>\n<h2 id=\"whatweb\"><a class=\"markdownIt-Anchor\" href=\"#whatweb\">#</a> whatweb</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ whatweb <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"whatrun\"><a class=\"markdownIt-Anchor\" href=\"#whatrun\">#</a> whatrun</h2>\n<p>這是一個 chorme 自帶的套件，能分析指紋。</p>\n<h2 id=\"網頁目錄掃描-burpsuite\"><a class=\"markdownIt-Anchor\" href=\"#網頁目錄掃描-burpsuite\">#</a> 網頁目錄掃描 (burpsuite)</h2>\n<p>三種方式掃描，爬蟲爬取，暴力掃描，搜索引擎。</p>\n<ul>\n<li>爬蟲可以用 burpsuite。</li>\n<li>暴力破解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hdXJvc29yaWEvZGlyc2VhcmNo\">dirsearsh</span><br>\n 為什麼需要暴力破解，爬蟲是用已知的內容去連結，但如果連結並沒有公開來的話，只能用猜的，如此才需要暴力破解。</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-3/",
            "url": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-3/",
            "title": "lecture-3 子域名",
            "date_published": "2023-05-04T10:23:00.000Z",
            "content_html": "<h2 id=\"掃描子域名的證書\"><a class=\"markdownIt-Anchor\" href=\"#掃描子域名的證書\">#</a> 掃描子域名的證書</h2>\n<p>這個用來查詢子域名的開發工具<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS90b29scy9jdC8=\"> fackbook</span>。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcnQuc2gv\">crt.sh</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlydXN0b3RhbC5jb20vZ3VpL2hvbWUvdXBsb2Fk\">virustotal</span></p>\n<h2 id=\"maltego\"><a class=\"markdownIt-Anchor\" href=\"#maltego\">#</a> Maltego</h2>\n<p><img data-src=\"Malted.jpg\" alt></p>\n<h2 id=\"sublist3r\"><a class=\"markdownIt-Anchor\" href=\"#sublist3r\">#</a> Sublist3r</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Fib3VsM2xhL1N1Ymxpc3Qzcg==\">github</span></p>\n<h2 id=\"oneforall\"><a class=\"markdownIt-Anchor\" href=\"#oneforall\">#</a> OneForAll</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NobWlseWx0eS9PbmVGb3JBbGw=\">github</span><br>\n 掃描玩的結果在 resule 資料夾裡面，要用 SQL 工具打開， <code>sqlitebrowser</code> 。</p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-2/",
            "url": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-2/",
            "title": "lecture-2 Nmap 操作",
            "date_published": "2023-05-04T10:22:00.000Z",
            "content_html": "<h1 id=\"nmap-是什麼\"><a class=\"markdownIt-Anchor\" href=\"#nmap-是什麼\">#</a> Nmap 是什麼</h1>\n<p>nmap 是一個掃描工具，可以掃描已知或未知的 IP, 或者端口。</p>\n<h2 id=\"大部分命令\"><a class=\"markdownIt-Anchor\" href=\"#大部分命令\">#</a> 大部分命令</h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-iflist</td>\n<td>顯示自身的網卡訊息</td>\n</tr>\n<tr>\n<td>-sT</td>\n<td>全 TCP 掃描</td>\n</tr>\n<tr>\n<td>-sS</td>\n<td>半開放式掃描</td>\n</tr>\n<tr>\n<td>-sF -sN -sX</td>\n<td>有關防火牆的掃瞄</td>\n</tr>\n<tr>\n<td>-O</td>\n<td>操作系統</td>\n</tr>\n<tr>\n<td>-sV</td>\n<td>端口服務版本</td>\n</tr>\n<tr>\n<td>-Pn</td>\n<td>禁止使用探測是否有開機的封包</td>\n</tr>\n<tr>\n<td>-T&lt;0~7&gt;</td>\n<td>掃描速率，通常建議為 T4, 預設為 T3。最快為 T7</td>\n</tr>\n<tr>\n<td>-D<ip></ip></td>\n<td>偽裝 IP 來源</td>\n</tr>\n<tr>\n<td>-g<port></port></td>\n<td>偽裝 port 來源</td>\n</tr>\n<tr>\n<td>–spoof-mac</td>\n<td>mac 欺騙</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常用指令\"><a class=\"markdownIt-Anchor\" href=\"#常用指令\">#</a> 常用指令</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ nmap <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token parameter variable\">-sS</span> <span class=\"token parameter variable\">-sV</span> <span class=\"token comment\"># 顯示 port 伺服器版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ nmap <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span>or<span class=\"token operator\">&lt;</span>domain<span class=\"token operator\">></span> <span class=\"token comment\"># 掃描目的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ nmap <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token parameter variable\">-sS</span> <span class=\"token comment\"># TCP SYN 半開掃描</span></pre></td></tr></table></figure><ul>\n<li>\n<p>半開掃描<br>\n這是指在 tcp 三次握手的時候，只做前面的兩次。這樣可以比較快，也可以不留紀錄的掃瞄。客戶端回發送 SYN 的封包，伺服器會發送 SYN+ACK。至此結束就稱為半開掃描。</p>\n</li>\n<li>\n<p>常用的命令</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token parameter variable\">-sn</span> 使用半開放式TCP 掃描主機是否在線</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token parameter variable\">-sS</span> 使用半開式TCP</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token parameter variable\">-sV</span> 使用完整的TCP</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token parameter variable\">-O</span>  探測操作系統</pre></td></tr></table></figure><h2 id=\"防火牆阻擋\"><a class=\"markdownIt-Anchor\" href=\"#防火牆阻擋\">#</a> 防火牆阻擋</h2>\n<p>這邊留個小筆記，nmap 有參數可以偵測防火牆是否打開。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Starting Nmap <span class=\"token number\">7.01</span> <span class=\"token punctuation\">(</span> https://nmap.org <span class=\"token punctuation\">)</span> at <span class=\"token number\">2021</span>-04-25 <span class=\"token number\">10</span>:45 CST</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Note: Host seems down. If it is really up, but blocking our <span class=\"token function\">ping</span> probes, try <span class=\"token parameter variable\">-Pn</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Nmap done: <span class=\"token number\">1</span> IP address <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> hosts up<span class=\"token punctuation\">)</span> scanned <span class=\"token keyword\">in</span> <span class=\"token number\">2.00</span> seconds</pre></td></tr></table></figure><p>在 nmap 掃描之前會發送 TCP 的 SYN 封包，如果防火牆拒絕回應 TCP port 80 or 443, 就會觸發拒絕。<br>\n因此在確定掃描目標開啟之後，可以避開發送 TCP, 直接對其進行刺探。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ nmap <span class=\"token parameter variable\">-T4</span> <span class=\"token parameter variable\">-Pn</span> <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>Port State</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>open:           port是開放</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>closed:         port是關閉</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>filtered:       防火牆被IDS/IPS, 無法確定狀態</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>unfiltered:     沒有被屏蔽, 但狀態還要再進一步確定</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">open</span><span class=\"token operator\">|</span>filtered:  Port 開啟/遮蔽</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>closed<span class=\"token operator\">|</span>filtered:Port 關閉/遮蔽</pre></td></tr></table></figure><h4 id=\"阻擋\"><a class=\"markdownIt-Anchor\" href=\"#阻擋\">#</a> 阻擋</h4>\n<p>被阻擋後可以使用 <code>-Pn</code> 。<br>\n如果出現 <code>Not shown: 998 filtered ports</code> , 代表其他 998 個 port 被過濾了，如果顯示 <code>STATE close</code> , 為防火牆有開啟此連線，但目標主機並沒有開啟使用這一項服務。 <code>STATE open</code>  為防火牆有開啟此連線，並且也有此服務啟動。</p>\n<h1 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\">#</a> Reference</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWNrNTQzLmNvbS9ubWFwLXR1dG9yaWFsLw==\">9 個常用的 nmap 掃描</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ3VzaGljaWt1LmNuL3BsL2dhblovemgtdHc=\">常用的命令</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-1/",
            "url": "http://onon1101.github.io/2023/05/04/network-security/detection/lecture-1/",
            "title": "lecture-1 攻防思路",
            "date_published": "2023-05-04T10:01:00.000Z",
            "content_html": "<h1 id=\"資訊安全\"><a class=\"markdownIt-Anchor\" href=\"#資訊安全\">#</a> 資訊安全</h1>\n<p>這是第一篇關於資訊安全的分類，分別記錄一下對於這個的學習過程。</p>\n<h2 id=\"流程\"><a class=\"markdownIt-Anchor\" href=\"#流程\">#</a> 流程</h2>\n<p>前幾篇先說明如何做到信息蒐集，當蒐集完成之後，開始攻擊。</p>\n",
            "tags": []
        }
    ]
}