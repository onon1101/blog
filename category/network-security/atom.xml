<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://onon1101.github.io</id>
    <title>meow • Posts by &#34;network-security&#34; category</title>
    <link href="http://onon1101.github.io" />
    <updated>2023-05-08T05:01:00.000Z</updated>
    <category term="hexo" />
    <category term="教學 Discrete-Mathematics" />
    <category term="教學 C/C++" />
    <entry>
        <id>http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-6/</id>
        <title>lecture-6 OS command injection</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-6/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;這個是一個關於 linux 命令的系統注入，可以在一些輸入框注入 linux 命令。&lt;/p&gt;
&lt;h2 id=&#34;pipe&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pipe&#34;&gt;#&lt;/a&gt; pipe (|)&lt;/h2&gt;
&lt;p&gt;把前一個進程執行的結果，輸出到下一個進程。下面的例子是把 nmap 執行完的結果輸出到 notepad。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ nmap &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ip&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-A&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; notepad&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; (&amp;amp;)&lt;/h2&gt;
&lt;p&gt;把進程設為後台的進程。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token builtin class-name&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;payload&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#payload&#34;&gt;#&lt;/a&gt; payload&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3BheWxvYWRib3gvY29tbWFuZC1pbmplY3Rpb24tcGF5bG9hZC1saXN0&#34;&gt;檔案&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;命令注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命令注入&#34;&gt;#&lt;/a&gt; 命令注入&lt;/h2&gt;
&lt;p&gt;在教學裡面，命令注入一些奇怪的參數後面，至於為什麼那裏可以注入，以及要注入什麼，都是由自己嘗試或者猜出來的，因此這是很困難的在沒有任何的提示之下。&lt;/p&gt;
</content>
        <updated>2023-05-08T05:01:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-5/</id>
        <title>lecture-5 Directory traversal</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-5/"/>
        <content type="html">&lt;h2 id=&#34;說明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#說明&#34;&gt;#&lt;/a&gt; 說明&lt;/h2&gt;
&lt;p&gt;抓包之後去找一下那些參數可以被注入的，例如… web 的參數。&lt;/p&gt;
&lt;p&gt;可以利用文件來取得一些本來不能被看到的東西。當網站出現能訪問系統資料夾的漏洞時。我們就可以猜測密碼檔案。&lt;/p&gt;
&lt;p&gt;例如 linux：/etc/passwd, 但有時候並不是放在跟目錄底下。所以有可能是…/etc/passwd, …/…/etc/passwd, 之類的。&lt;br&gt;
但如果是 windows, /WINDOWS/win.ini&lt;/p&gt;
&lt;p&gt;然後再注入的時候可以用 burpsuite 去猜測，而這邊有&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhlVGhpbmdzL3RyZWUvbWFzdGVyL0ZpbGUlMjBJbmNsdXNpb24=&#34;&gt;字典檔案&lt;/span&gt;，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3htZW5kZXovd2Z1enovYmxvYi9tYXN0ZXIvd29yZGxpc3QvSW5qZWN0aW9ucy9UcmF2ZXJzYWwudHh0&#34;&gt;檔案 2&lt;/span&gt;。&lt;/p&gt;
</content>
        <updated>2023-05-07T23:35:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-4/</id>
        <title>lecture-4 信息洩漏(Information disclosure)</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-4/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;信息洩漏可能有 phpinfo (), 或者後端用什麼語言寫的，那在低版本是不是會有漏洞。&lt;/p&gt;
&lt;h2 id=&#34;information-disclosure-in-error-messages&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#information-disclosure-in-error-messages&#34;&gt;#&lt;/a&gt; Information disclosure in error messages&lt;/h2&gt;
&lt;p&gt;他要找第三方的框架版本號。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;抓包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;看網頁底下有什麼的目錄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;發現什麼都看不到，所以我們查看他版本最快的方法就是讓網頁產生一個錯誤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然後我們把 &lt;code&gt;?product=很大的數字&lt;/code&gt; ，然後就可以看到它是用 java 寫的了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或者我們去看他的腳本或者註釋就能發現版本訊息了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;source-code-disclosure-via-backup-files&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#source-code-disclosure-via-backup-files&#34;&gt;#&lt;/a&gt; Source code disclosure via backup files&lt;/h2&gt;
&lt;p&gt;他說備份文件洩漏了，而且備份文件裡面有資料庫的密碼。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;robots.txt 就可以看到裡面有 backup 的目錄了&lt;/li&gt;
&lt;li&gt;在進去 backup, 裡面就可以看到密碼了&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;information-disclosure-on-debug-page&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#information-disclosure-on-debug-page&#34;&gt;#&lt;/a&gt; Information disclosure on debug page&lt;/h2&gt;
&lt;p&gt;他說有訊息洩漏在 debug 的頁面，然後密碼洩漏在環境遍量 &lt;code&gt;SECRET_KEY&lt;/code&gt;  裡面。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先掃描一下目錄，發現有 phpinfo.php 的頁面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查詢一下他的 &lt;code&gt;SECRET_KEY&lt;/code&gt; , 就能發現，但我們還有第二種方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;點選 burpsuite 右鍵，找到 engagement tools, 然後 Search, 輸入環境變量就能找到了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;information-disclosure-in-version-control-histroy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#information-disclosure-in-version-control-histroy&#34;&gt;#&lt;/a&gt; Information disclosure in version control histroy&lt;/h2&gt;
&lt;p&gt;在 git 的頁面就可以看到。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;authentication-bypass&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#authentication-bypass&#34;&gt;#&lt;/a&gt; Authentication bypass&lt;/h2&gt;
&lt;p&gt;這是一個要偽裝本地原 ip 的題目。作者在想要如何偽裝的時候想用 http 的標頭偽裝，但這個方法失敗了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;標準答案是用 TRACT 在 TCP 協議方法裡面&lt;/li&gt;
&lt;li&gt;postman 可以用 port 請求的工具&lt;/li&gt;
&lt;li&gt;而他題目裡面因為有自定義的標頭檔案，所以要用 TRACT 的 TCP 協議去查看，並且修改一下。&lt;/li&gt;
&lt;li&gt;將他修改為 127.0.0.1&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-05-07T09:46:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-3/</id>
        <title>lecture-3 邏輯漏洞</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-3/"/>
        <content type="html">&lt;h2 id=&#34;邏輯漏洞舉例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#邏輯漏洞舉例&#34;&gt;#&lt;/a&gt; 邏輯漏洞舉例&lt;/h2&gt;
&lt;p&gt;如果 1 件 = 100 元，10 件 = 1000 元，那麼 -1 件 是不是就會是 -100 元。&lt;br&gt;
在分析一個網站的時候，最好把每一個頁面都分析清楚。&lt;/p&gt;
&lt;p&gt;這邊用的靶場就不用 DVWA, 會用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L2FsbC1sYWJz&#34;&gt;這個&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;excessive-trust-in-client-side-controls&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#excessive-trust-in-client-side-controls&#34;&gt;#&lt;/a&gt; Excessive trust in client-side controls&lt;/h2&gt;
&lt;p&gt;這邊先用 butpsuite 分析封包，發現他會把價錢和數量都送給後端。因此我們改一下送出去的價錢就好了。&lt;/p&gt;
&lt;h2 id=&#34;high-level-logic-vulnerability&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#high-level-logic-vulnerability&#34;&gt;#&lt;/a&gt; High-level logic vulnerability&lt;/h2&gt;
&lt;p&gt;封包分析完後只能送數量，所以我們送出一個負的數量，他說總共的價格不能小於 0, 因此我們選很多商品讓價格大於 0, 這樣就可以了。&lt;/p&gt;
&lt;h2 id=&#34;low-level-logic-flaw&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#low-level-logic-flaw&#34;&gt;#&lt;/a&gt; Low-level logic flaw&lt;/h2&gt;
&lt;p&gt;在這個實驗中，沒有辦法送負的商品數量，因此思路是用溢出的方式，超過他整數的範圍，讓他溢出到負數的部分，讓他在 1~100 之間。&lt;br&gt;
這次使用到 burpsuite 的自動發送封包，之前都是在 repeater 裡面，把封包送到 Intruder 那邊，用 null payload, 就可以不斷發送封包，因為最大送出的數量是 99, 只好送出很多個 99 數量的封包。&lt;/p&gt;
&lt;h2 id=&#34;inconsistent-handling-of-exceptional-input&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#inconsistent-handling-of-exceptional-input&#34;&gt;#&lt;/a&gt; Inconsistent handling of exceptional input&lt;/h2&gt;
&lt;p&gt;在 burpsuite 要發現一個網站底下的目錄可以用 target-&amp;gt; sitemap -&amp;gt; 右鍵 -&amp;gt; engagement tools -&amp;gt; discover content。&lt;br&gt;
在掃瞄的過程中就可以掃到 admin 目錄了。&lt;/p&gt;
&lt;p&gt;先註冊一遍用戶。而這個頁面有給我們一個信箱，在註冊的時候可以用這個信箱。而註冊之後發現還是沒有辦法進去 admin 的頁面。&lt;/p&gt;
&lt;p&gt;架設我們在註冊的時候把 email 命名的很長，發現他最大只到 255 個字元，因此我們可以把 email 變成這樣： &lt;code&gt;&amp;lt;username&amp;gt;@dontwannacry.com.0aa800ed0436e336805a8b91006900df.web-security-academy.net&lt;/code&gt; 。這樣註冊完成之後再去 username 裡面看，就能發現他只有 &lt;code&gt;&amp;lt;username&amp;gt;@dontwannacry.com&lt;/code&gt; 。實際上在我們應該是要建造一個 &lt;code&gt;dontwannacry.com.0aa800ed0436e336805a8b91006900df.web-security-academy.net&lt;/code&gt;  這樣的郵件服務器，但是這個網站幫我們都處理好了，所以只要在 web-security.net 這裡註冊就好了。&lt;/p&gt;
&lt;p&gt;註冊完成看一下就可以使用 admin 了。&lt;/p&gt;
</content>
        <updated>2023-05-07T07:48:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-2/</id>
        <title>lecture-2 弱口令或者弱密碼</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-2/"/>
        <content type="html">&lt;h2 id=&#34;什麼是弱口令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什麼是弱口令&#34;&gt;#&lt;/a&gt; 什麼是弱口令&lt;/h2&gt;
&lt;p&gt;很容易被電腦或者字典檔案猜到，就算他很複雜密碼。&lt;/p&gt;
&lt;h2 id=&#34;hydra&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hydra&#34;&gt;#&lt;/a&gt; hydra&lt;/h2&gt;
&lt;p&gt;這個是 kali linux 內建的一個暴力破解的軟體。其實工具是非常強大的，但能不能破解取決於字典檔強不強大。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hydra &lt;span class=&#34;token parameter variable&#34;&gt;-L&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;username_file&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;password_file&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ip&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;protocol&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;burnsuite&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#burnsuite&#34;&gt;#&lt;/a&gt; burnsuite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先把瀏覽器的 proxy server 設定與 burnsuite 一樣，我自己測試的結果如果用 burnsuite 自己的瀏覽器，會出現一些莫名其妙的錯誤。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-config&#34;&gt;$ 127.0.0.1:8080 #這個是burnsuite預設的port
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先把 &lt;code&gt;Intercept is on&lt;/code&gt; , 這個是監聽封包的意思。喔對了，因為教學影片裡面是真的打，而我找不到能打的機器，所以用 DVWA 架設了一個。之後有空再教學。&lt;br&gt;
&lt;img data-src=&#34;1.jpg&#34; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;右鍵找到 Intruder, 並點擊。&lt;br&gt;
&lt;img data-src=&#34;2.jpg&#34; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然後進去。裡面高亮的部分就是暴力破解的部分。如果想要自定義破解，可以選擇 clean, 在點擊兩下，並且 add。會出現他自定義的符號包起來你要破解的地方。&lt;br&gt;
&lt;img data-src=&#34;3.jpg&#34; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然後選擇攻擊類型。&lt;br&gt;
&lt;img data-src=&#34;4.jpg&#34; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Payloads 選擇。這邊以後有在詳細的介紹。第二個是選擇字典檔案。第三個選擇從字典拿到的密碼要用什麼的加密方式。&lt;br&gt;
&lt;img data-src=&#34;5.jpg&#34; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不過這邊我們遇到一個問題是，他的長度應該是要變化的，上網搜了一下是轉址的問題。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 username 和 password 要同時爆破，可以選擇四個模式的不同。&lt;/p&gt;
</content>
        <updated>2023-05-06T14:19:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-1/</id>
        <title>lecture-1 漏洞挖掘</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-1/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;再查看這個分類之前，應該些去閱讀 detection 的分類。而漏洞的挖掘會用 burpsuite 比較多。所以先說一下怎麼取的 burpsuite 的 pro 版本。&lt;/p&gt;
&lt;h2 id=&#34;下載頁面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下載頁面&#34;&gt;#&lt;/a&gt; 下載頁面&lt;/h2&gt;
&lt;p&gt;這邊都是以 kali liunx 為主。&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NOR1dOL0J1cnAtU3VpdGU=&#34;&gt;下載連結&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一步都是先下載執行檔案 (.sh), 而當中必須要有 keygen.jar 的檔案才行。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;figcaption data-lang=&#34;txt&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;folder&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;|-- Kali_Linux_Setup.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;|-- keygen.jar&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;|-- loader.jar&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;不過在單純執行的 keygen 的時候遇到了一個小問題。沒辦法顯示 java 的程序。&lt;br&gt;
解決的方法我是這樣做&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root@host$ &lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;DISPLAY&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1:0.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;kali@host$ xhost + &lt;span class=&#34;token comment&#34;&gt;#這邊要在 user 執行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;access control disabled, clients can connect from any &lt;span class=&#34;token function&#34;&gt;host&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;kali@host$ &lt;span class=&#34;token function&#34;&gt;java&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-jar&lt;/span&gt; kengen.jar&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root@host$ xhost + &lt;span class=&#34;token comment&#34;&gt;#就會抱錯&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xhost:  unable to &lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt; display &lt;span class=&#34;token string&#34;&gt;&#34;127.0.0.1:0.0&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;1.jpg&#34; alt&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;先把左邊的 License 貼到 burpsuite 裡面，下一步之後再選擇  &lt;code&gt;Manual actvial&lt;/code&gt; 。&lt;br&gt;
&lt;img data-src=&#34;2.jpg&#34; alt&gt;&lt;/li&gt;
&lt;li&gt;現在會跳出三個格子，把 burpsuite 裡面的請求碼貼到破解軟體的第二格中，之後再把破解軟體的第三格貼到 burpsuite, 至此就完成了。&lt;br&gt;
&lt;img data-src=&#34;4.jpg&#34; alt&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-05-06T12:36:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/06/network-security/detection/lecture-10/</id>
        <title>lecture-10 信息蒐集的一個小小總結</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/06/network-security/detection/lecture-10/"/>
        <content type="html">&lt;h2 id=&#34;總結&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#總結&#34;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;在這之前的文章都是關於信息蒐集的部分，因此這邊來做一個小小的總結。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一開始說我們可以用 Nmap 做防火牆的探測或者其他的掃描，後面可以使用子域名的掃瞄，因為域名跟子域名可能會有關係。&lt;/li&gt;
&lt;li&gt;對於不同的子域名可以做 port 的掃瞄，操作系統的探測。&lt;/li&gt;
&lt;li&gt;假設發現了一個網站，可以掃描她的網站指紋檢測。&lt;/li&gt;
&lt;li&gt;目錄的掃瞄，看看有什麼敏感的信息，有沒有後台。假設沒有的話，可以用漏洞的掃描。&lt;/li&gt;
&lt;li&gt;但如果掃描器都沒有甚麼用的話，可能是 WAF 擋下來了，那麼要去偵測有沒有 WAF。可以用代理掃描，但也有可能是 payload。但也要偵測有沒有 CDN。&lt;/li&gt;
&lt;li&gt;攻擊之後可能會是密罐。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-05-05T17:32:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/06/network-security/detection/lecture-9/</id>
        <title>lecture-9 密罐陷阱</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/06/network-security/detection/lecture-9/"/>
        <content type="html">&lt;h2 id=&#34;密罐陷阱&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#密罐陷阱&#34;&gt;#&lt;/a&gt; 密罐陷阱&lt;/h2&gt;
&lt;p&gt;簡單來說是特意布置的陷阱，讓攻擊者能上當，當攻擊者使用攻擊手段進行攻擊的話，我們就能知道他的攻擊手法，這就是密罐陷阱。&lt;br&gt;
如果要說怎麼避免的話，只能透過經驗去判斷，假設今天這個網站很多漏洞，就要有警覺心了。&lt;/p&gt;
&lt;h2 id=&#34;hfish&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hfish&#34;&gt;#&lt;/a&gt; Hfish&lt;/h2&gt;
&lt;p&gt;一個功能不那麼強大的密罐&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZmlzaC5pby8jLw==&#34;&gt;下載網址&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2023-05-05T17:19:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/06/network-security/detection/lecture-8/</id>
        <title>lecture-8 CDN檢測</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/06/network-security/detection/lecture-8/"/>
        <content type="html">&lt;h2 id=&#34;whichcdn&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#whichcdn&#34;&gt;#&lt;/a&gt; whichCDN&lt;/h2&gt;
&lt;p&gt;原理可能是用證書的透明度。&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL05pdHI0eC93aGljaENETg==&#34;&gt;下載連結&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;cloudflair&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cloudflair&#34;&gt;#&lt;/a&gt; cloudflair&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NocmlzdG9waGV0ZC9DbG91ZEZsYWly&#34;&gt;下載連結&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;w8fuckdcdn&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#w8fuckdcdn&#34;&gt;#&lt;/a&gt; w8fuckdcdn&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NocmlzdG9waGV0ZC9DbG91ZEZsYWly&#34;&gt;下載連結&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;其實也可以用 nslookup 判斷有沒有使用 CDN, 如果有多個 IP 的解析，就代表有。&lt;/p&gt;
</content>
        <updated>2023-05-05T16:17:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/05/network-security/detection/lecture-7/</id>
        <title>lecture-7 代理掃描</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/05/network-security/detection/lecture-7/"/>
        <content type="html">&lt;h2 id=&#34;proxychain-ng&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#proxychain-ng&#34;&gt;#&lt;/a&gt; proxychain-ng&lt;/h2&gt;
&lt;p&gt;不過這個需要自己編譯。&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JvZmwwci9wcm94eWNoYWlucy1uZw==&#34;&gt;下載網址&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在執行命令之前，需要開 tor-browser/tor/tor…, 不過不太知道那是幹嘛的，所以之後再來補。&lt;br&gt;
補：tor.exe 是下載完 tor 瀏覽器後可以看到的執行檔案。tor.exe 是一個稱為洋蔥路由器的軟體，開啟她之後可以使用代理連線 (P2P)。從這個端口發送的流量就可以到 tor 裡面的路由了。&lt;br&gt;
&lt;img data-src=&#34;1.jpg&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;這樣就會可以從代理的地方出口封包。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;proxychains4 &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; ./proxychains4-ng-4.11/src/proxychains.conf nmap &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到默認是用 tor socks4 代理的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-config&#34;&gt;#./src/proxychains.conf
...
[ProxyList]
# add proxy here ...
# meanwile
# defaults set to &amp;quot;tor&amp;quot;
socks4 	127.0.0.1 9050
...
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2023-05-05T14:19:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/04/network-security/detection/lecture-6/</id>
        <title>lecture-6 WAF原理與掃描</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/04/network-security/detection/lecture-6/"/>
        <content type="html">&lt;h2 id=&#34;聊天&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#聊天&#34;&gt;#&lt;/a&gt; 聊天&lt;/h2&gt;
&lt;p&gt;其實掃描工具發展到最後可能都一樣，但他們的 payload 可能會不一樣。&lt;/p&gt;
&lt;h2 id=&#34;waf可不可以吃&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#waf可不可以吃&#34;&gt;#&lt;/a&gt; WAF 可不可以吃&lt;/h2&gt;
&lt;p&gt;全稱為 Web Application Firewall (網頁應用程式防火牆), 顧名思義用來保護網站的防火牆。工作在 OSI 第七層。&lt;br&gt;
&lt;img data-src=&#34;https://blog.cloudmax.com.tw/wp-content/uploads/2020/07/WAF-%E6%98%AF%E7%94%9A%E9%BA%BC-03.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;而 WAF 是反向代理 (我就不展開說，反正我知道那是啥) 的方式，這樣能保護伺服器端。&lt;br&gt;
&lt;img data-src=&#34;https://www.cloudflare.com/img/learning/ddos/glossary/waf/waf.png&#34; alt&gt;&lt;/p&gt;
&lt;h2 id=&#34;waf00f&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#waf00f&#34;&gt;#&lt;/a&gt; waf00f&lt;/h2&gt;
&lt;p&gt;一個 WAF 的探測工具。可以探測 waf 的一些類型。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ waf00f &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ip&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;原理也是用封包探測的方式，再去分析她的特偵。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vemgtdHcvbGVhcm5pbmcvZGRvcy9nbG9zc2FyeS93ZWItYXBwbGljYXRpb24tZmlyZXdhbGwtd2FmLw==&#34;&gt;Cloudflare&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2023-05-04T12:04:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/04/network-security/detection/lecture-5/</id>
        <title>lecture-5 網頁漏洞掃描</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/04/network-security/detection/lecture-5/"/>
        <content type="html">&lt;h2 id=&#34;jaeleshttpsgithubcomjaeles-projectjaeles&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jaeleshttpsgithubcomjaeles-projectjaeles&#34;&gt;#&lt;/a&gt; (jaeles)[&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phZWxlcy1wcm9qZWN0L2phZWxlcw==&#34;&gt;https://github.com/jaeles-project/jaeles&lt;/span&gt;]&lt;/h2&gt;
&lt;p&gt;可以與 burpsuite 對接。&lt;br&gt;
下載一些漏洞庫，並且初始化一些東西。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ ./jaeles-v0.15-linux-amd64 config init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;掃描&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ https://github.com/jaeles-project/jaeles scan &lt;span class=&#34;token parameter variable&#34;&gt;-u&lt;/span&gt; http://zero.webappsecurity.com/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;payload 可以從他的掃描庫裡面去看。&lt;br&gt;
原理也是遍地的放封包給他，然後再分析。&lt;/p&gt;
&lt;h2 id=&#34;niktohttpsgithubcomsullonikto&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#niktohttpsgithubcomsullonikto&#34;&gt;#&lt;/a&gt; (nikto)[&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3N1bGxvL25pa3Rv&#34;&gt;https://github.com/sullo/nikto&lt;/span&gt;]&lt;/h2&gt;
&lt;p&gt;默認都是把配置全部套用的。他可以代理，但這邊先不展開。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ nikto &lt;span class=&#34;token parameter variable&#34;&gt;-h&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ip&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;port&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在說明文件裡面也有說明可以很多個掃描&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ nmap &lt;span class=&#34;token parameter variable&#34;&gt;-p80&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.0.0/24 &lt;span class=&#34;token parameter variable&#34;&gt;-oG&lt;/span&gt; - &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; nikto &lt;span class=&#34;token parameter variable&#34;&gt;-h&lt;/span&gt; -&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-05-04T12:03:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/04/network-security/detection/lecture-4/</id>
        <title>lecture-4 網站指紋識別與網站目錄掃描</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/04/network-security/detection/lecture-4/"/>
        <content type="html">&lt;h2 id=&#34;指紋識別&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指紋識別&#34;&gt;#&lt;/a&gt; 指紋識別&lt;/h2&gt;
&lt;p&gt;識別網站的特色，能查大概查清楚網站是用什麼框架寫的。在掃瞄網站目錄的時候，就能大概知道後台運作的流程。原理是請求不同的 HTTP 請求，每一個框架就會回傳不同的標頭檔案，再去分析他的特色。&lt;/p&gt;
&lt;p&gt;之後就可以用特定的工具去掃他的漏洞。假設網站是用 wordpress 搭建的，查詢可以使用 &lt;code&gt;wordpress scanner vulnerabilities&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;whatweb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#whatweb&#34;&gt;#&lt;/a&gt; whatweb&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ whatweb &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ip&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;whatrun&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#whatrun&#34;&gt;#&lt;/a&gt; whatrun&lt;/h2&gt;
&lt;p&gt;這是一個 chorme 自帶的套件，能分析指紋。&lt;/p&gt;
&lt;h2 id=&#34;網頁目錄掃描-burpsuite&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#網頁目錄掃描-burpsuite&#34;&gt;#&lt;/a&gt; 網頁目錄掃描 (burpsuite)&lt;/h2&gt;
&lt;p&gt;三種方式掃描，爬蟲爬取，暴力掃描，搜索引擎。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;爬蟲可以用 burpsuite。&lt;/li&gt;
&lt;li&gt;暴力破解：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21hdXJvc29yaWEvZGlyc2VhcmNo&#34;&gt;dirsearsh&lt;/span&gt;&lt;br&gt;
 為什麼需要暴力破解，爬蟲是用已知的內容去連結，但如果連結並沒有公開來的話，只能用猜的，如此才需要暴力破解。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2023-05-04T10:24:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/04/network-security/detection/lecture-3/</id>
        <title>lecture-3 子域名</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/04/network-security/detection/lecture-3/"/>
        <content type="html">&lt;h2 id=&#34;掃描子域名的證書&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#掃描子域名的證書&#34;&gt;#&lt;/a&gt; 掃描子域名的證書&lt;/h2&gt;
&lt;p&gt;這個用來查詢子域名的開發工具&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS90b29scy9jdC8=&#34;&gt; fackbook&lt;/span&gt;。&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcnQuc2gv&#34;&gt;crt.sh&lt;/span&gt;, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudmlydXN0b3RhbC5jb20vZ3VpL2hvbWUvdXBsb2Fk&#34;&gt;virustotal&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;maltego&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#maltego&#34;&gt;#&lt;/a&gt; Maltego&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;Malted.jpg&#34; alt&gt;&lt;/p&gt;
&lt;h2 id=&#34;sublist3r&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sublist3r&#34;&gt;#&lt;/a&gt; Sublist3r&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Fib3VsM2xhL1N1Ymxpc3Qzcg==&#34;&gt;github&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;oneforall&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#oneforall&#34;&gt;#&lt;/a&gt; OneForAll&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NobWlseWx0eS9PbmVGb3JBbGw=&#34;&gt;github&lt;/span&gt;&lt;br&gt;
 掃描玩的結果在 resule 資料夾裡面，要用 SQL 工具打開， &lt;code&gt;sqlitebrowser&lt;/code&gt; 。&lt;/p&gt;
</content>
        <updated>2023-05-04T10:23:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/04/network-security/detection/lecture-2/</id>
        <title>lecture-2 Nmap 操作</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/04/network-security/detection/lecture-2/"/>
        <content type="html">&lt;h1 id=&#34;nmap-是什麼&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nmap-是什麼&#34;&gt;#&lt;/a&gt; Nmap 是什麼&lt;/h1&gt;
&lt;p&gt;nmap 是一個掃描工具，可以掃描已知或未知的 IP, 或者端口。&lt;/p&gt;
&lt;h2 id=&#34;大部分命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#大部分命令&#34;&gt;#&lt;/a&gt; 大部分命令&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-iflist&lt;/td&gt;
&lt;td&gt;顯示自身的網卡訊息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sT&lt;/td&gt;
&lt;td&gt;全 TCP 掃描&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sS&lt;/td&gt;
&lt;td&gt;半開放式掃描&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sF -sN -sX&lt;/td&gt;
&lt;td&gt;有關防火牆的掃瞄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-O&lt;/td&gt;
&lt;td&gt;操作系統&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sV&lt;/td&gt;
&lt;td&gt;端口服務版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-Pn&lt;/td&gt;
&lt;td&gt;禁止使用探測是否有開機的封包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-T&amp;lt;0~7&amp;gt;&lt;/td&gt;
&lt;td&gt;掃描速率，通常建議為 T4, 預設為 T3。最快為 T7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-D&lt;ip&gt;&lt;/ip&gt;&lt;/td&gt;
&lt;td&gt;偽裝 IP 來源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-g&lt;port&gt;&lt;/port&gt;&lt;/td&gt;
&lt;td&gt;偽裝 port 來源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–spoof-mac&lt;/td&gt;
&lt;td&gt;mac 欺騙&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;常用指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用指令&#34;&gt;#&lt;/a&gt; 常用指令&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ nmap &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ip&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-sS&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-sV&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 顯示 port 伺服器版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ nmap &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ip&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;or&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;domain&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 掃描目的&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ nmap &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ip&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-sS&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# TCP SYN 半開掃描&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;半開掃描&lt;br&gt;
這是指在 tcp 三次握手的時候，只做前面的兩次。這樣可以比較快，也可以不留紀錄的掃瞄。客戶端回發送 SYN 的封包，伺服器會發送 SYN+ACK。至此結束就稱為半開掃描。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用的命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token parameter variable&#34;&gt;-sn&lt;/span&gt; 使用半開放式TCP 掃描主機是否在線&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token parameter variable&#34;&gt;-sS&lt;/span&gt; 使用半開式TCP&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token parameter variable&#34;&gt;-sV&lt;/span&gt; 使用完整的TCP&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token parameter variable&#34;&gt;-O&lt;/span&gt;  探測操作系統&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;防火牆阻擋&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#防火牆阻擋&#34;&gt;#&lt;/a&gt; 防火牆阻擋&lt;/h2&gt;
&lt;p&gt;這邊留個小筆記，nmap 有參數可以偵測防火牆是否打開。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Starting Nmap &lt;span class=&#34;token number&#34;&gt;7.01&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; https://nmap.org &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; at &lt;span class=&#34;token number&#34;&gt;2021&lt;/span&gt;-04-25 &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;:45 CST&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Note: Host seems down. If it is really up, but blocking our &lt;span class=&#34;token function&#34;&gt;ping&lt;/span&gt; probes, try &lt;span class=&#34;token parameter variable&#34;&gt;-Pn&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Nmap done: &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; IP address &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; hosts up&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; scanned &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2.00&lt;/span&gt; seconds&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 nmap 掃描之前會發送 TCP 的 SYN 封包，如果防火牆拒絕回應 TCP port 80 or 443, 就會觸發拒絕。&lt;br&gt;
因此在確定掃描目標開啟之後，可以避開發送 TCP, 直接對其進行刺探。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ nmap &lt;span class=&#34;token parameter variable&#34;&gt;-T4&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-Pn&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ip&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;Port State&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;open:           port是開放&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;closed:         port是關閉&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;filtered:       防火牆被IDS/IPS, 無法確定狀態&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;unfiltered:     沒有被屏蔽, 但狀態還要再進一步確定&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;filtered:  Port 開啟/遮蔽&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;closed&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;filtered:Port 關閉/遮蔽&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;阻擋&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#阻擋&#34;&gt;#&lt;/a&gt; 阻擋&lt;/h4&gt;
&lt;p&gt;被阻擋後可以使用 &lt;code&gt;-Pn&lt;/code&gt; 。&lt;br&gt;
如果出現 &lt;code&gt;Not shown: 998 filtered ports&lt;/code&gt; , 代表其他 998 個 port 被過濾了，如果顯示 &lt;code&gt;STATE close&lt;/code&gt; , 為防火牆有開啟此連線，但目標主機並沒有開啟使用這一項服務。 &lt;code&gt;STATE open&lt;/code&gt;  為防火牆有開啟此連線，並且也有此服務啟動。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oYWNrNTQzLmNvbS9ubWFwLXR1dG9yaWFsLw==&#34;&gt;9 個常用的 nmap 掃描&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ3VzaGljaWt1LmNuL3BsL2dhblovemgtdHc=&#34;&gt;常用的命令&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2023-05-04T10:22:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onon1101.github.io/2023/05/04/network-security/detection/lecture-1/</id>
        <title>lecture-1 攻防思路</title>
        <link rel="alternate" href="http://onon1101.github.io/2023/05/04/network-security/detection/lecture-1/"/>
        <content type="html">&lt;h1 id=&#34;資訊安全&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#資訊安全&#34;&gt;#&lt;/a&gt; 資訊安全&lt;/h1&gt;
&lt;p&gt;這是第一篇關於資訊安全的分類，分別記錄一下對於這個的學習過程。&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#流程&#34;&gt;#&lt;/a&gt; 流程&lt;/h2&gt;
&lt;p&gt;前幾篇先說明如何做到信息蒐集，當蒐集完成之後，開始攻擊。&lt;/p&gt;
</content>
        <updated>2023-05-04T10:01:00.000Z</updated>
    </entry>
</feed>
