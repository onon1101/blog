{
    "version": "https://jsonfeed.org/version/1",
    "title": "meow • All posts by \"vulnerability\" category",
    "description": "早安>.<",
    "home_page_url": "http://onon1101.github.io",
    "items": [
        {
            "id": "http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-6/",
            "url": "http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-6/",
            "title": "lecture-6 OS command injection",
            "date_published": "2023-05-08T05:01:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>這個是一個關於 linux 命令的系統注入，可以在一些輸入框注入 linux 命令。</p>\n<h2 id=\"pipe\"><a class=\"markdownIt-Anchor\" href=\"#pipe\">#</a> pipe (|)</h2>\n<p>把前一個進程執行的結果，輸出到下一個進程。下面的例子是把 nmap 執行完的結果輸出到 notepad。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ nmap <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token parameter variable\">-A</span> <span class=\"token operator\">|</span> notepad</pre></td></tr></table></figure><h2 id><a class=\"markdownIt-Anchor\" href=\"#\">#</a> (&amp;)</h2>\n<p>把進程設為後台的進程。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><h2 id=\"payload\"><a class=\"markdownIt-Anchor\" href=\"#payload\">#</a> payload</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BheWxvYWRib3gvY29tbWFuZC1pbmplY3Rpb24tcGF5bG9hZC1saXN0\">檔案</span></p>\n<h2 id=\"命令注入\"><a class=\"markdownIt-Anchor\" href=\"#命令注入\">#</a> 命令注入</h2>\n<p>在教學裡面，命令注入一些奇怪的參數後面，至於為什麼那裏可以注入，以及要注入什麼，都是由自己嘗試或者猜出來的，因此這是很困難的在沒有任何的提示之下。</p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-5/",
            "url": "http://onon1101.github.io/2023/05/08/network-security/Vulnerability/lecture-5/",
            "title": "lecture-5 Directory traversal",
            "date_published": "2023-05-07T23:35:00.000Z",
            "content_html": "<h2 id=\"說明\"><a class=\"markdownIt-Anchor\" href=\"#說明\">#</a> 說明</h2>\n<p>抓包之後去找一下那些參數可以被注入的，例如… web 的參數。</p>\n<p>可以利用文件來取得一些本來不能被看到的東西。當網站出現能訪問系統資料夾的漏洞時。我們就可以猜測密碼檔案。</p>\n<p>例如 linux：/etc/passwd, 但有時候並不是放在跟目錄底下。所以有可能是…/etc/passwd, …/…/etc/passwd, 之類的。<br>\n但如果是 windows, /WINDOWS/win.ini</p>\n<p>然後再注入的時候可以用 burpsuite 去猜測，而這邊有<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N3aXNza3lyZXBvL1BheWxvYWRzQWxsVGhlVGhpbmdzL3RyZWUvbWFzdGVyL0ZpbGUlMjBJbmNsdXNpb24=\">字典檔案</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3htZW5kZXovd2Z1enovYmxvYi9tYXN0ZXIvd29yZGxpc3QvSW5qZWN0aW9ucy9UcmF2ZXJzYWwudHh0\">檔案 2</span>\u001f。</p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-4/",
            "url": "http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-4/",
            "title": "lecture-4 信息洩漏(Information disclosure)",
            "date_published": "2023-05-07T09:46:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>信息洩漏可能有 phpinfo (), 或者後端用什麼語言寫的，那在低版本是不是會有漏洞。</p>\n<h2 id=\"information-disclosure-in-error-messages\"><a class=\"markdownIt-Anchor\" href=\"#information-disclosure-in-error-messages\">#</a> Information disclosure in error messages</h2>\n<p>他要找第三方的框架版本號。</p>\n<ol>\n<li>\n<p>抓包</p>\n</li>\n<li>\n<p>看網頁底下有什麼的目錄</p>\n</li>\n<li>\n<p>發現什麼都看不到，所以我們查看他版本最快的方法就是讓網頁產生一個錯誤</p>\n</li>\n<li>\n<p>然後我們把 <code>?product=很大的數字</code> ，然後就可以看到它是用 java 寫的了。</p>\n</li>\n<li>\n<p>或者我們去看他的腳本或者註釋就能發現版本訊息了。</p>\n</li>\n</ol>\n<h2 id=\"source-code-disclosure-via-backup-files\"><a class=\"markdownIt-Anchor\" href=\"#source-code-disclosure-via-backup-files\">#</a> Source code disclosure via backup files</h2>\n<p>他說備份文件洩漏了，而且備份文件裡面有資料庫的密碼。</p>\n<ol>\n<li>robots.txt 就可以看到裡面有 backup 的目錄了</li>\n<li>在進去 backup, 裡面就可以看到密碼了</li>\n</ol>\n<h2 id=\"information-disclosure-on-debug-page\"><a class=\"markdownIt-Anchor\" href=\"#information-disclosure-on-debug-page\">#</a> Information disclosure on debug page</h2>\n<p>他說有訊息洩漏在 debug 的頁面，然後密碼洩漏在環境遍量 <code>SECRET_KEY</code>  裡面。</p>\n<ol>\n<li>\n<p>先掃描一下目錄，發現有 phpinfo.php 的頁面</p>\n</li>\n<li>\n<p>查詢一下他的 <code>SECRET_KEY</code> , 就能發現，但我們還有第二種方式</p>\n</li>\n<li>\n<p>點選 burpsuite 右鍵，找到 engagement tools, 然後 Search, 輸入環境變量就能找到了。</p>\n</li>\n</ol>\n<h2 id=\"information-disclosure-in-version-control-histroy\"><a class=\"markdownIt-Anchor\" href=\"#information-disclosure-in-version-control-histroy\">#</a> Information disclosure in version control histroy</h2>\n<p>在 git 的頁面就可以看到。</p>\n<ol>\n<li></li>\n</ol>\n<h2 id=\"authentication-bypass\"><a class=\"markdownIt-Anchor\" href=\"#authentication-bypass\">#</a> Authentication bypass</h2>\n<p>這是一個要偽裝本地原 ip 的題目。作者在想要如何偽裝的時候想用 http 的標頭偽裝，但這個方法失敗了。</p>\n<ol>\n<li>標準答案是用 TRACT 在 TCP 協議方法裡面</li>\n<li>postman 可以用 port 請求的工具</li>\n<li>而他題目裡面因為有自定義的標頭檔案，所以要用 TRACT 的 TCP 協議去查看，並且修改一下。</li>\n<li>將他修改為 127.0.0.1</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-3/",
            "url": "http://onon1101.github.io/2023/05/07/network-security/Vulnerability/lecture-3/",
            "title": "lecture-3 邏輯漏洞",
            "date_published": "2023-05-07T07:48:00.000Z",
            "content_html": "<h2 id=\"邏輯漏洞舉例\"><a class=\"markdownIt-Anchor\" href=\"#邏輯漏洞舉例\">#</a> 邏輯漏洞舉例</h2>\n<p>如果 1 件 = 100 元，10 件 = 1000 元，那麼 -1 件 是不是就會是 -100 元。<br>\n在分析一個網站的時候，最好把每一個頁面都分析清楚。</p>\n<p>這邊用的靶場就不用 DVWA, 會用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0c3dpZ2dlci5uZXQvd2ViLXNlY3VyaXR5L2FsbC1sYWJz\">這個</span>。</p>\n<h2 id=\"excessive-trust-in-client-side-controls\"><a class=\"markdownIt-Anchor\" href=\"#excessive-trust-in-client-side-controls\">#</a> Excessive trust in client-side controls</h2>\n<p>這邊先用 butpsuite 分析封包，發現他會把價錢和數量都送給後端。因此我們改一下送出去的價錢就好了。</p>\n<h2 id=\"high-level-logic-vulnerability\"><a class=\"markdownIt-Anchor\" href=\"#high-level-logic-vulnerability\">#</a> High-level logic vulnerability</h2>\n<p>封包分析完後只能送數量，所以我們送出一個負的數量，他說總共的價格不能小於 0, 因此我們選很多商品讓價格大於 0, 這樣就可以了。</p>\n<h2 id=\"low-level-logic-flaw\"><a class=\"markdownIt-Anchor\" href=\"#low-level-logic-flaw\">#</a> Low-level logic flaw</h2>\n<p>在這個實驗中，沒有辦法送負的商品數量，因此思路是用溢出的方式，超過他整數的範圍，讓他溢出到負數的部分，讓他在 1~100 之間。<br>\n這次使用到 burpsuite 的自動發送封包，之前都是在 repeater 裡面，把封包送到 Intruder 那邊，用 null payload, 就可以不斷發送封包，因為最大送出的數量是 99, 只好送出很多個 99 數量的封包。</p>\n<h2 id=\"inconsistent-handling-of-exceptional-input\"><a class=\"markdownIt-Anchor\" href=\"#inconsistent-handling-of-exceptional-input\">#</a> Inconsistent handling of exceptional input</h2>\n<p>在 burpsuite 要發現一個網站底下的目錄可以用 target-&gt; sitemap -&gt; 右鍵 -&gt; engagement tools -&gt; discover content。<br>\n在掃瞄的過程中就可以掃到 admin 目錄了。</p>\n<p>先註冊一遍用戶。而這個頁面有給我們一個信箱，在註冊的時候可以用這個信箱。而註冊之後發現還是沒有辦法進去 admin 的頁面。</p>\n<p>架設我們在註冊的時候把 email 命名的很長，發現他最大只到 255 個字元，因此我們可以把 email 變成這樣： <code>&lt;username&gt;@dontwannacry.com.0aa800ed0436e336805a8b91006900df.web-security-academy.net</code> 。這樣註冊完成之後再去 username 裡面看，就能發現他只有 <code>&lt;username&gt;@dontwannacry.com</code> 。實際上在我們應該是要建造一個 <code>dontwannacry.com.0aa800ed0436e336805a8b91006900df.web-security-academy.net</code>  這樣的郵件服務器，但是這個網站幫我們都處理好了，所以只要在 web-security.net 這裡註冊就好了。</p>\n<p>註冊完成看一下就可以使用 admin 了。</p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-2/",
            "url": "http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-2/",
            "title": "lecture-2 弱口令或者弱密碼",
            "date_published": "2023-05-06T14:19:00.000Z",
            "content_html": "<h2 id=\"什麼是弱口令\"><a class=\"markdownIt-Anchor\" href=\"#什麼是弱口令\">#</a> 什麼是弱口令</h2>\n<p>很容易被電腦或者字典檔案猜到，就算他很複雜密碼。</p>\n<h2 id=\"hydra\"><a class=\"markdownIt-Anchor\" href=\"#hydra\">#</a> hydra</h2>\n<p>這個是 kali linux 內建的一個暴力破解的軟體。其實工具是非常強大的，但能不能破解取決於字典檔強不強大。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hydra <span class=\"token parameter variable\">-L</span> <span class=\"token operator\">&lt;</span>username_file<span class=\"token operator\">></span> <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>password_file<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>protocol<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"burnsuite\"><a class=\"markdownIt-Anchor\" href=\"#burnsuite\">#</a> burnsuite</h2>\n<ul>\n<li>先把瀏覽器的 proxy server 設定與 burnsuite 一樣，我自己測試的結果如果用 burnsuite 自己的瀏覽器，會出現一些莫名其妙的錯誤。</li>\n</ul>\n<pre><code class=\"language-config\">$ 127.0.0.1:8080 #這個是burnsuite預設的port\n</code></pre>\n<ul>\n<li>\n<p>先把 <code>Intercept is on</code> , 這個是監聽封包的意思。喔對了，因為教學影片裡面是真的打，而我找不到能打的機器，所以用 DVWA 架設了一個。之後有空再教學。<br>\n<img data-src=\"1.jpg\" alt></p>\n</li>\n<li>\n<p>右鍵找到 Intruder, 並點擊。<br>\n<img data-src=\"2.jpg\" alt></p>\n</li>\n<li>\n<p>然後進去。裡面高亮的部分就是暴力破解的部分。如果想要自定義破解，可以選擇 clean, 在點擊兩下，並且 add。會出現他自定義的符號包起來你要破解的地方。<br>\n<img data-src=\"3.jpg\" alt></p>\n</li>\n<li>\n<p>然後選擇攻擊類型。<br>\n<img data-src=\"4.jpg\" alt></p>\n</li>\n<li>\n<p>Payloads 選擇。這邊以後有在詳細的介紹。第二個是選擇字典檔案。第三個選擇從字典拿到的密碼要用什麼的加密方式。<br>\n<img data-src=\"5.jpg\" alt></p>\n</li>\n<li>\n<p>不過這邊我們遇到一個問題是，他的長度應該是要變化的，上網搜了一下是轉址的問題。</p>\n</li>\n</ul>\n<p>如果 username 和 password 要同時爆破，可以選擇四個模式的不同。</p>\n",
            "tags": []
        },
        {
            "id": "http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-1/",
            "url": "http://onon1101.github.io/2023/05/06/network-security/Vulnerability/lecture-1/",
            "title": "lecture-1 漏洞挖掘",
            "date_published": "2023-05-06T12:36:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>再查看這個分類之前，應該些去閱讀 detection 的分類。而漏洞的挖掘會用 burpsuite 比較多。所以先說一下怎麼取的 burpsuite 的 pro 版本。</p>\n<h2 id=\"下載頁面\"><a class=\"markdownIt-Anchor\" href=\"#下載頁面\">#</a> 下載頁面</h2>\n<p>這邊都是以 kali liunx 為主。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NOR1dOL0J1cnAtU3VpdGU=\">下載連結</span></p>\n<ol>\n<li>第一步都是先下載執行檔案 (.sh), 而當中必須要有 keygen.jar 的檔案才行。</li>\n</ol>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>folder</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>|-- Kali_Linux_Setup.sh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>|-- keygen.jar</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>|-- loader.jar</pre></td></tr></table></figure><p>不過在單純執行的 keygen 的時候遇到了一個小問題。沒辦法顯示 java 的程序。<br>\n解決的方法我是這樣做</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root@host$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">DISPLAY</span></span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1:0.0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kali@host$ xhost + <span class=\"token comment\">#這邊要在 user 執行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>access control disabled, clients can connect from any <span class=\"token function\">host</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kali@host$ <span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> kengen.jar</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>root@host$ xhost + <span class=\"token comment\">#就會抱錯</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xhost:  unable to <span class=\"token function\">open</span> display <span class=\"token string\">\"127.0.0.1:0.0\"</span></pre></td></tr></table></figure><p><img data-src=\"1.jpg\" alt></p>\n<ol start=\"2\">\n<li>先把左邊的 License 貼到 burpsuite 裡面，下一步之後再選擇  <code>Manual actvial</code> 。<br>\n<img data-src=\"2.jpg\" alt></li>\n<li>現在會跳出三個格子，把 burpsuite 裡面的請求碼貼到破解軟體的第二格中，之後再把破解軟體的第三格貼到 burpsuite, 至此就完成了。<br>\n<img data-src=\"4.jpg\" alt></li>\n</ol>\n",
            "tags": []
        }
    ]
}